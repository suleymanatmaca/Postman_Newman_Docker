{
	"info": {
		"_postman_id": "50fb2005-50ce-4875-b9bc-8ae9754c71a7",
		"name": "example_products",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "7359408"
	},
	"item": [
		{
			"name": "TS1_GET_Check_Header_and_Response_Codes",
			"item": [
				{
					"name": "TC1_Check_Status_Code_200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"    console.log(\"Response Time: \", pm.response.responseTime.toString());\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{x-api-key}}",
								"type": "text"
							}
						],
						"url": "{{baseURL}}"
					},
					"response": [
						{
							"name": "TC1_Check_Status_Code_200",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "937"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=300"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"ee7c17ed6bcbb2535a928e2f70226a0558ed7b91db219a77300c30bb068b7ed4\""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "8D60:DB59:1890F8F:19C59CB:657607E9"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 20:43:10 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510032-SOF"
								},
								{
									"key": "X-Cache",
									"value": "HIT"
								},
								{
									"key": "X-Cache-Hits",
									"value": "2"
								},
								{
									"key": "X-Timer",
									"value": "S1702240990.322666,VS0,VE0"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b6941521245f5ad9e8943867e2cd323745566bab"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 20:48:10 GMT"
								},
								{
									"key": "Source-Age",
									"value": "264"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"title\": \"Apple iPad 9. Nesil 64 GB\",\n    \"description\": \"Lorem ipsum dolor sit amet.\",\n    \"price\": 5400,\n    \"isBasketDiscount\": true,\n    \"basketDiscountPercentage\": 10,\n    \"rating\": 4.69,\n    \"stock\": 50,\n    \"isActive\": false,\n    \"brand\": \"Apple\",\n    \"category\": \"ipad\",\n    \"images\": [\n      \"https://cdn.dsmcdn.com/ty321/product/media/images/20220204/14/43694637/262004743/1/1_org_zoom.jpg\",\n      \"https://cdn.dsmcdn.com/ty323/product/media/images/20220204/14/43694637/262004743/3/3_org_zoom.jpg\"\n    ]\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Apple iPhone 12 64 GB\",\n    \"description\": \"Lorem ipsum dolor sit amet.\",\n    \"price\": 13500,\n    \"isBasketDiscount\": false,\n    \"rating\": 4.4,\n    \"stock\": 20,\n    \"brand\": \"Apple\",\n    \"category\": \"smartphones\",\n    \"images\": [\n      \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57616583/1/1_org_zoom.jpg\"\n    ]\n  }\n]"
						}
					]
				},
				{
					"name": "TC2_Check_Content_Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\r",
									"\r",
									"tests[\"Has Content-Type\"] = contentTypeHeaderExists;\r",
									"console.log(\"Content-Type is exist\");\r",
									"\r",
									"if (contentTypeHeaderExists) {\r",
									"    tests[\"Content-Type is text/plain; charset=utf-8\"] = \r",
									"      responseHeaders[\"Content-Type\"].has(\"text/html; charset=utf-8\");\r",
									"      console.log(\"Content-Type is text/html; charset=utf-8\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}"
					},
					"response": [
						{
							"name": "TC2_Check_Content_Type",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "937"
								},
								{
									"key": "Cache-Control",
									"value": "max-age=300"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"ee7c17ed6bcbb2535a928e2f70226a0558ed7b91db219a77300c30bb068b7ed4\""
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "9C96:E8F4:1D4C192:1EC5137:65762A00"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:13:37 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702242817.094457,VS0,VE181"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b3126f33a6a68d083585dc1f017eb7be1fd596f0"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:18:37 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": 1,\n    \"title\": \"Apple iPad 9. Nesil 64 GB\",\n    \"description\": \"Lorem ipsum dolor sit amet.\",\n    \"price\": 5400,\n    \"isBasketDiscount\": true,\n    \"basketDiscountPercentage\": 10,\n    \"rating\": 4.69,\n    \"stock\": 50,\n    \"isActive\": false,\n    \"brand\": \"Apple\",\n    \"category\": \"ipad\",\n    \"images\": [\n      \"https://cdn.dsmcdn.com/ty321/product/media/images/20220204/14/43694637/262004743/1/1_org_zoom.jpg\",\n      \"https://cdn.dsmcdn.com/ty323/product/media/images/20220204/14/43694637/262004743/3/3_org_zoom.jpg\"\n    ]\n  },\n  {\n    \"id\": 2,\n    \"title\": \"Apple iPhone 12 64 GB\",\n    \"description\": \"Lorem ipsum dolor sit amet.\",\n    \"price\": 13500,\n    \"isBasketDiscount\": false,\n    \"rating\": 4.4,\n    \"stock\": 20,\n    \"brand\": \"Apple\",\n    \"category\": \"smartphones\",\n    \"images\": [\n      \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57616583/1/1_org_zoom.jpg\"\n    ]\n  }\n]"
						}
					]
				},
				{
					"name": "TC3_Check_Status_Code_40x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response status code\", function () {\r",
									"    const randomResponseCode = pm.variables.get('randomResponseCode40x');\r",
									"    pm.expect(pm.response.code).to.eql(parseInt(randomResponseCode));\r",
									"    const responseBody = pm.response.json();\r",
									"    console.log(\"Error message: \"+ responseBody.error.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseCodes = [\"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\"];\r",
									"const randomIndex = Math.floor(Math.random()*responseCodes.length);\r",
									"const randomResponseCode = responseCodes[randomIndex];\r",
									"    \r",
									"pm.variables.set(\"randomResponseCode40x\", randomResponseCode.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "{{randomResponseCode40x}}",
								"type": "text"
							}
						],
						"url": "{{baseURL}}/badrequest"
					},
					"response": [
						{
							"name": "TC3_Check_Status_Code_400",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-mock-response-code",
										"value": "{{randomResponseCode40x}}",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/badrequest"
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "14"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "1DAA:AEBE:17DCFF9:191391D:65762BB0"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:20:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702243249.055240,VS0,VE168"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b500180152228dc5cd168057fa2a8ef2e6a3fe7f"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:25:49 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockBadRequest\",\n        \"message\": \"400 Bad Request\",\n        \"header\": \"400 Bad Request\"\n    }\n}"
						},
						{
							"name": "TC3_Check_Status_Code_401",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-mock-response-code",
										"value": "{{randomResponseCode40x}}",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/badrequest"
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "14"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "1DAA:AEBE:17DCFF9:191391D:65762BB0"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:20:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702243249.055240,VS0,VE168"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b500180152228dc5cd168057fa2a8ef2e6a3fe7f"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:25:49 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockUnauthorized\",\n        \"message\": \"401 Unauthorized\",\n        \"header\": \"401 Unauthorized\"\n    }\n}"
						},
						{
							"name": "TC3_Check_Status_Code_402",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-mock-response-code",
										"value": "{{randomResponseCode40x}}",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/badrequest"
							},
							"status": "Payment Required",
							"code": 402,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "14"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "1DAA:AEBE:17DCFF9:191391D:65762BB0"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:20:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702243249.055240,VS0,VE168"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b500180152228dc5cd168057fa2a8ef2e6a3fe7f"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:25:49 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockPaymentRequired\",\n        \"message\": \"402 Payment Required\",\n        \"header\": \"402 Payment Required\"\n    }\n}"
						},
						{
							"name": "TC3_Check_Status_Code_403",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-mock-response-code",
										"value": "{{randomResponseCode40x}}",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/badrequest"
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "14"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "1DAA:AEBE:17DCFF9:191391D:65762BB0"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:20:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702243249.055240,VS0,VE168"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b500180152228dc5cd168057fa2a8ef2e6a3fe7f"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:25:49 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockError\",\n        \"message\": \"403 Forbidden\",\n        \"header\": \"403 Forbidden\"\n    }\n}"
						},
						{
							"name": "TC3_Check_Status_Code_404",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-mock-response-code",
										"value": "{{randomResponseCode40x}}",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/badrequest"
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "14"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "1DAA:AEBE:17DCFF9:191391D:65762BB0"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:20:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702243249.055240,VS0,VE168"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b500180152228dc5cd168057fa2a8ef2e6a3fe7f"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:25:49 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockNotFound\",\n        \"message\": \"404 Not Found\",\n        \"header\": \"404 Not Found\"\n    }\n}"
						},
						{
							"name": "TC3_Check_Status_Code_405",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-mock-response-code",
										"value": "{{randomResponseCode40x}}",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/badrequest"
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "14"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "1DAA:AEBE:17DCFF9:191391D:65762BB0"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:20:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702243249.055240,VS0,VE168"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b500180152228dc5cd168057fa2a8ef2e6a3fe7f"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:25:49 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockError\",\n        \"message\": \"405 Method Not Allowed\",\n        \"header\": \"405 Method Not Allowed\"\n    }\n}"
						},
						{
							"name": "TC3_Check_Status_Code_406",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "x-mock-response-code",
										"value": "{{randomResponseCode40x}}",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/badrequest"
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Content-Length",
									"value": "14"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; style-src 'unsafe-inline'; sandbox"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "deny"
								},
								{
									"key": "X-XSS-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								},
								{
									"key": "X-GitHub-Request-Id",
									"value": "1DAA:AEBE:17DCFF9:191391D:65762BB0"
								},
								{
									"key": "Accept-Ranges",
									"value": "bytes"
								},
								{
									"key": "Date",
									"value": "Sun, 10 Dec 2023 21:20:49 GMT"
								},
								{
									"key": "Via",
									"value": "1.1 varnish"
								},
								{
									"key": "X-Served-By",
									"value": "cache-sof1510038-SOF"
								},
								{
									"key": "X-Cache",
									"value": "MISS"
								},
								{
									"key": "X-Cache-Hits",
									"value": "0"
								},
								{
									"key": "X-Timer",
									"value": "S1702243249.055240,VS0,VE168"
								},
								{
									"key": "Vary",
									"value": "Authorization,Accept-Encoding,Origin"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "cross-origin"
								},
								{
									"key": "X-Fastly-Request-ID",
									"value": "b500180152228dc5cd168057fa2a8ef2e6a3fe7f"
								},
								{
									"key": "Expires",
									"value": "Sun, 10 Dec 2023 21:25:49 GMT"
								},
								{
									"key": "Source-Age",
									"value": "0"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"mockError\",\n        \"message\": \"406 Not Acceptable\",\n        \"header\": \"406 Not Acceptable\"\n    }\n}"
						}
					]
				},
				{
					"name": "TC4_Check_Status_Code_50x",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response status code\", function () {\r",
									"    const randomResponseCode = pm.variables.get('randomResponseCode50x');\r",
									"    pm.expect(pm.response.code).to.eql(parseInt(randomResponseCode));\r",
									"    const responseBody = pm.response.json();\r",
									"    console.log(\"Error message: \"+ responseBody.error.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseCodes = [\"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\"];\r",
									"const randomIndex = Math.floor(Math.random()*responseCodes.length);\r",
									"const randomResponseCode = responseCodes[randomIndex];\r",
									"    \r",
									"pm.variables.set(\"randomResponseCode50x\", randomResponseCode.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "{{randomResponseCode50x}}",
								"type": "text"
							}
						],
						"url": "{{baseURL}}/badrequest"
					},
					"response": []
				}
			]
		},
		{
			"name": "TS2_GET_Check_Response_Body_Keys",
			"item": [
				{
					"name": "TC5_Check_Response_Body_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"// Test to check if each object in the response array has the 'id' key\r",
									"pm.test(\"Check for 'id' keys and have specified values (1,2)\", function () {\r",
									"    // Parse the response body as JSON\r",
									"    let jsonData = pm.response.json();\r",
									"\r",
									"    // Ensure the response data is an array\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"response body as JSON array\");\r",
									"\r",
									"    // Iterate through each object in the response array\r",
									"    jsonData.forEach(function (item) {\r",
									"        // Check if each object has the 'id' key\r",
									"        pm.expect(item).to.have.property('id');\r",
									"    console.log(\"response body has is\");\r",
									"        // Ensure the 'id' value is a number\r",
									"        pm.expect(item.id).to.be.a('number');\r",
									"    console.log(\"response body id is number type\");\r",
									"        // Check if the ID is one of the specified values\r",
									"        pm.test(item.id + \" is one of the test ids\", function () {\r",
									"            pm.expect(item.id).to.be.oneOf(pm.variables.get(\"ids\"));\r",
									"        });\r",
									"        \r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var ids=[1,2]\r",
									"pm.variables.set(\"ids\",ids);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": "{{baseURL}}"
					},
					"response": []
				},
				{
					"name": "TC6_Check_Response_Body_For_Fixed_Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"// Retrieve the expected keys from the local variable\r",
									"const expectedKeys = pm.variables.get(\"expectedKeys\");\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check for all keys in response and their types\", function () {\r",
									"    console.log(\"Data length: \"+jsonData.length);\r",
									"\r",
									"    // Ensure the response data is an array\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"response body as JSON array\");\r",
									"\r",
									"    // Iterate through each object in the response array\r",
									"    jsonData.forEach(function (item, index) {\r",
									"        // Check if all expected keys are present in the object\r",
									"        expectedKeys.forEach(function (key) {\r",
									"            pm.expect(item).haveOwnPropertyDescriptor(key, \"Key '${key}' is missing in object at index ${index}\");\r",
									"        });\r",
									"        // Check types of specific keys in each object\r",
									"        pm.expect(item.id).to.be.a(\"number\");\r",
									"        console.log(\"response body id type is number\");\r",
									"        pm.expect(item.title).to.be.a(\"string\");\r",
									"        console.log(\"response body title type is string\");\r",
									"        pm.expect(item.description).to.be.a(\"string\");\r",
									"        console.log(\"response body description type is string\");\r",
									"        pm.expect(item.price).to.be.a(\"number\");\r",
									"        console.log(\"response body price type is number\");\r",
									"        pm.expect(item.isBasketDiscount).to.be.a(\"boolean\");\r",
									"        console.log(\"response body isBasketDiscount type is boolean\");\r",
									"        pm.expect(item.rating).to.be.a(\"number\");\r",
									"        console.log(\"response body rating type is number\");\r",
									"        pm.expect(item.stock).to.be.a(\"number\");\r",
									"        console.log(\"response body stock type is number\");\r",
									"        pm.expect(item.brand).to.be.a(\"string\");\r",
									"        console.log(\"response body brand type is string\");\r",
									"        pm.expect(item.category).to.be.a(\"string\");\r",
									"        console.log(\"response body category type is string\");\r",
									"        pm.expect(item.images).to.be.an(\"array\");\r",
									"        console.log(\"response body images type is array\");\r",
									"         pm.expect(item.images.length).to.be.above(0); // Check the 'images' array length\r",
									"        item.images.forEach(function (image) {\r",
									"            pm.expect(image).to.be.a('string'); // Check each image URL in the 'images' array\r",
									"            console.log(\"response body image url is string\");\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define an array containing all expected keys\r",
									"pm.variables.set(\"expectedKeys\", [\"id\", \"title\", \"description\", \"price\", \"isBasketDiscount\", \"rating\", \"stock\", \"brand\", \"category\", \"images\"]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}"
					},
					"response": []
				},
				{
					"name": "TC7_Check_Response_Body_For_Optional_Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"// Retrieve the expected keys from the local variable\r",
									"const expectedOptionalKeys = pm.variables.get(\"expectedOptionalKeys\");\r",
									"\r",
									"// Retrieve the expected keys type from the local variable\r",
									"const expectedOptionalKeysType = pm.variables.get(\"expectedOptionalKeysType\");\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Check for optional keys in response and their types\", function () {\r",
									"    console.log(\"Data length: \"+jsonData.length);\r",
									"\r",
									"    // Ensure the response data is an array\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"    console.log(\"response body as JSON array\");\r",
									"\r",
									"    for (let i = 0; i < expectedOptionalKeysType.length; i++) {\r",
									"    // Iterate through each object in the response array\r",
									"        jsonData.forEach(function (item, index) {\r",
									"        // Check if all expected keys are present in the object\r",
									"\r",
									"            // Check if the optional property exists in the object\r",
									"            if (expectedOptionalKeysType[i]===\"number\" && expectedOptionalKeys[i] in item) {\r",
									"                // If the property exists, assert its type \r",
									"                pm.expect(Number.isInteger(item[expectedOptionalKeys[i]])).to.be.true;\r",
									"                    console.log(\"response body basketDiscountPercentage type is number\");\r",
									"            } else {\r",
									"                // Handle cases where the property is not present (optional)\r",
									"                console.log(\"Optional property '${expectedOptionalKeys[i]}' is missing in object at index ${index}\");\r",
									"            }\r",
									"      \r",
									"            // Check if the optional property exists in the object\r",
									"            if (expectedOptionalKeysType[i]===\"boolean\" && expectedOptionalKeys[i] in item) {\r",
									"                // If the property exists, assert its type \r",
									"                pm.expect(Boolean(item[expectedOptionalKeys[i]])).to.be.a(expectedOptionalKeysType[i]);\r",
									"                console.log(\"response body isActive type is boolean\");\r",
									"            } else {\r",
									"                // Handle cases where the property is not present (optional)\r",
									"                console.log(\"Optional property '${expectedOptionalKeys[i]}' is missing in object at index ${index}\");\r",
									"            }\r",
									"        });\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Define an array containing all optional keys\r",
									"pm.variables.set(\"expectedOptionalKeys\", [\"basketDiscountPercentage\",\"isActive\"]);\r",
									"\r",
									"// Define an array containing all optional keys\r",
									"pm.variables.set(\"expectedOptionalKeysType\", ['number','boolean']);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "TS3_GET_Check_Products",
			"item": [
				{
					"name": "TC8_Compare_Id_Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseIds = [1, 2];\r",
									"const randomIndex = Math.floor(Math.random() * responseIds.length);\r",
									"const randomId = responseIds[randomIndex];\r",
									"\r",
									"pm.variables.set(\"randomId\", randomId);\r",
									"pm.request.url.query.add({ key: 'id', value: randomId.toString() });\r",
									"\r",
									"let expectedResponse;\r",
									"\r",
									"if (randomId === 1) {\r",
									"    expectedResponse = {\r",
									"        \"id\": 1,\r",
									"        \"title\": \"Apple iPad 9. Nesil 64 GB\",\r",
									"        \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"        \"price\": 5400,\r",
									"        \"isBasketDiscount\": true,\r",
									"        \"basketDiscountPercentage\": 10,\r",
									"        \"rating\": 4.69,\r",
									"        \"stock\": 50,\r",
									"        \"isActive\": false,\r",
									"        \"brand\": \"Apple\",\r",
									"        \"category\": \"ipad\",\r",
									"        \"images\": [\r",
									"            \"https://cdn.dsmcdn.com/ty321/product/media/images/20220204/14/43694637/262004743/1/1_org_zoom.jpg\",\r",
									"            \"https://cdn.dsmcdn.com/ty323/product/media/images/20220204/14/43694637/262004743/3/3_org_zoom.jpg\"\r",
									"        ]\r",
									"    };\r",
									"} else {\r",
									"    expectedResponse = {\r",
									"        \"id\": 2,\r",
									"        \"title\": \"Apple iPhone 12 64 GB\",\r",
									"        \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"        \"price\": 13500,\r",
									"        \"isBasketDiscount\": false,\r",
									"        \"rating\": 4.4,\r",
									"        \"stock\": 20,\r",
									"        \"brand\": \"Apple\",\r",
									"        \"category\": \"smartphones\",\r",
									"        \"images\": [\r",
									"            \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57616583/1/1_org_zoom.jpg\"\r",
									"        ]\r",
									"    };\r",
									"}\r",
									"\r",
									"pm.variables.set(\"expectedResponse\", expectedResponse);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"// Define the expected JSON data\r",
									"const expectedData = pm.variables.get(\"expectedResponse\");\r",
									"// Parse the response body as JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected JSON with response data\", function () {\r",
									"    // Compare properties in the response with the expected data\r",
									"    Object.keys(responseData).forEach(function (key) {\r",
									"        pm.expect(responseData[key]).to.eql(expectedData[key]);\r",
									"    });\r",
									"    console.log(\"Compare expected JSON data with response data are same\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "id",
								"value": "{{randomId}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": "{{baseURL}}"
					},
					"response": []
				},
				{
					"name": "TC9_Compare_All_Data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const expectedResponse =\r",
									"[\r",
									"  {\r",
									"    \"id\": 1,\r",
									"    \"title\": \"Apple iPad 9. Nesil 64 GB\",\r",
									"    \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"    \"price\": 5400,\r",
									"    \"isBasketDiscount\": true,\r",
									"    \"basketDiscountPercentage\": 10,\r",
									"    \"rating\": 4.69,\r",
									"    \"stock\": 50,\r",
									"    \"isActive\": false,\r",
									"    \"brand\": \"Apple\",\r",
									"    \"category\": \"ipad\",\r",
									"    \"images\": [\r",
									"      \"https://cdn.dsmcdn.com/ty321/product/media/images/20220204/14/43694637/262004743/1/1_org_zoom.jpg\",\r",
									"      \"https://cdn.dsmcdn.com/ty323/product/media/images/20220204/14/43694637/262004743/3/3_org_zoom.jpg\"\r",
									"    ]\r",
									"  },\r",
									"  {\r",
									"    \"id\": 2,\r",
									"    \"title\": \"Apple iPhone 12 64 GB\",\r",
									"    \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"    \"price\": 13500,\r",
									"    \"isBasketDiscount\": false,\r",
									"    \"rating\": 4.4,\r",
									"    \"stock\": 20,\r",
									"    \"brand\": \"Apple\",\r",
									"    \"category\": \"smartphones\",\r",
									"    \"images\": [\r",
									"      \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57616583/1/1_org_zoom.jpg\"\r",
									"    ]\r",
									"  }\r",
									"];\r",
									"\r",
									"pm.variables.set(\"expectedResponse\", expectedResponse); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"// Define the expected JSON data\r",
									"const expectedData = pm.variables.get(\"expectedResponse\");\r",
									"\r",
									"// Parse the response body as JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected JSON with response data\", function () {\r",
									"    // Ensure the response data is an array\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"\r",
									"    // Check if the response length matches the expected data length\r",
									"    pm.expect(responseData.length).to.equal(expectedData.length);\r",
									"    console.log(\"Response data length is equal to expected data length\");\r",
									"    // Compare each object in the response with the expected data\r",
									"    expectedData.forEach(function (expectedItem, index) {\r",
									"        const responseItem = responseData[index];\r",
									"\r",
									"        // Compare properties in each object\r",
									"        Object.keys(expectedItem).forEach(function (key) {\r",
									"            pm.expect(responseItem[key]).to.deep.equal(expectedItem[key]);\r",
									"        });\r",
									"    });\r",
									"        console.log(\"Compare All product data with response data are same\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseURL}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "TS4_POST_Check_Products_Add",
			"item": [
				{
					"name": "TC11_Check_Product_Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const expectedResponse =\r",
									"[\r",
									"  {\r",
									"    \"id\": 1,\r",
									"    \"title\": \"Apple iPad 9. Nesil 64 GB\",\r",
									"    \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"    \"price\": 5400,\r",
									"    \"isBasketDiscount\": true,\r",
									"    \"basketDiscountPercentage\": 10,\r",
									"    \"rating\": 4.69,\r",
									"    \"stock\": 50,\r",
									"    \"isActive\": false,\r",
									"    \"brand\": \"Apple\",\r",
									"    \"category\": \"ipad\",\r",
									"    \"images\": [\r",
									"      \"https://cdn.dsmcdn.com/ty321/product/media/images/20220204/14/43694637/262004743/1/1_org_zoom.jpg\",\r",
									"      \"https://cdn.dsmcdn.com/ty323/product/media/images/20220204/14/43694637/262004743/3/3_org_zoom.jpg\"\r",
									"    ]\r",
									"  },\r",
									"  {\r",
									"    \"id\": 2,\r",
									"    \"title\": \"Apple iPhone 12 64 GB\",\r",
									"    \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"    \"price\": 13500,\r",
									"    \"isBasketDiscount\": false,\r",
									"    \"rating\": 4.4,\r",
									"    \"stock\": 20,\r",
									"    \"brand\": \"Apple\",\r",
									"    \"category\": \"smartphones\",\r",
									"    \"images\": [\r",
									"      \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57616583/1/1_org_zoom.jpg\"\r",
									"    ]\r",
									"  },\r",
									"    {\r",
									"        \"id\": 3,\r",
									"        \"title\": \"Samsung Note 12 64 GB\",\r",
									"        \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"        \"price\": 10500,\r",
									"        \"isBasketDiscount\": true,\r",
									"        \"rating\": 4.6,\r",
									"        \"stock\": 30,\r",
									"        \"brand\": \"Samsung\",\r",
									"        \"category\": \"smartphones\",\r",
									"        \"images\": [\r",
									"            \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57612383/1/1_org_zoom.jpg\",\r",
									"            \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57612383/1/2_org_zoom.jpg\",\r",
									"            \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57612383/1/3_org_zoom.jpg\"\r",
									"        ]\r",
									"    }\r",
									"];\r",
									"\r",
									"pm.variables.set(\"expectedResponse\", expectedResponse); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;\r",
									"console.log(\"New product added\");\r",
									"// Define the expected JSON data\r",
									"const expectedData = pm.variables.get(\"expectedResponse\");\r",
									"// Parse the response body as JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected JSON with response data\", function () {\r",
									"    // Compare properties in the response with the expected data\r",
									"    Object.keys(responseData).forEach(function (key) {\r",
									"        pm.expect(responseData[key]).to.eql(expectedData[key]);\r",
									"    });\r",
									"    console.log(\"Compare expected JSON data with response data are same\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 3,\r\n    \"title\": \"Samsung Note 12 64 GB\",\r\n    \"description\": \"Lorem ipsum dolor sit amet.\",\r\n    \"price\": 10500,\r\n    \"isBasketDiscount\": true,\r\n    \"rating\": 4.6,\r\n    \"stock\": 30,\r\n    \"brand\": \"Samsung\",\r\n    \"category\": \"smartphones\",\r\n    \"images\": [\r\n        \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57612383/1/1_org_zoom.jpg\",\r\n        \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57612383/1/2_org_zoom.jpg\",\r\n        \"https://cdn.dsmcdn.com/mnresize/1200/1800/ty94/product/media/images/20210404/09/74346117/57612383/1/3_org_zoom.jpg\"\r\n        ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/add"
					},
					"response": []
				}
			]
		},
		{
			"name": "TS5_PUT_Check_Products_Update",
			"item": [
				{
					"name": "TC12_Check_Product_Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const expectedResponse =\r",
									"  {\r",
									"        \"id\": 1,\r",
									"        \"title\": \"Apple iPad 10. Nesil 64 GB\",\r",
									"        \"description\": \"Lorem ipsum dolor sit amet.\",\r",
									"        \"price\": 5400,\r",
									"        \"isBasketDiscount\": true,\r",
									"        \"basketDiscountPercentage\": 10,\r",
									"        \"rating\": 4.69,\r",
									"        \"stock\": 50,\r",
									"        \"isActive\": false,\r",
									"        \"brand\": \"Apple\",\r",
									"        \"category\": \"ipad\",\r",
									"        \"images\": [\r",
									"            \"https://cdn.dsmcdn.com/ty321/product/media/images/20220204/14/43694637/262004743/1/1_org_zoom.jpg\",\r",
									"            \"https://cdn.dsmcdn.com/ty323/product/media/images/20220204/14/43694637/262004743/3/3_org_zoom.jpg\"\r",
									"        ]\r",
									"    };\r",
									"\r",
									"pm.variables.set(\"expectedResponse\", expectedResponse); "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 202\"] = responseCode.code === 202;\r",
									"console.log(\"Product updated\");\r",
									"// Define the expected JSON data\r",
									"const expectedData = pm.variables.get(\"expectedResponse\");\r",
									"// Parse the response body as JSON\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"pm.test(\"Compare expected JSON with response data\", function () {\r",
									"    // Compare properties in the response with the expected data\r",
									"    Object.keys(responseData).forEach(function (key) {\r",
									"        pm.expect(responseData[key]).to.eql(expectedData[key]);\r",
									"    });\r",
									"    console.log(\"Compare expected JSON data with response data are same\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"id\": 1,\r\n        \"title\": \"Apple iPad 10. Nesil 64 GB\",\r\n        \"description\": \"Lorem ipsum dolor sit amet.\",\r\n        \"price\": 5400,\r\n        \"isBasketDiscount\": true,\r\n        \"basketDiscountPercentage\": 10,\r\n        \"rating\": 4.69,\r\n        \"stock\": 50,\r\n        \"isActive\": false,\r\n        \"brand\": \"Apple\",\r\n        \"category\": \"ipad\",\r\n        \"images\": [\r\n            \"https://cdn.dsmcdn.com/ty321/product/media/images/20220204/14/43694637/262004743/1/1_org_zoom.jpg\",\r\n            \"https://cdn.dsmcdn.com/ty323/product/media/images/20220204/14/43694637/262004743/3/3_org_zoom.jpg\"\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/put?id=1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"put"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TS6_DELETE_Check_Products_Delete",
			"item": [
				{
					"name": "TC13_Check_Product_Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const responseIds = [1, 2];\r",
									"const randomIndex = Math.floor(Math.random() * responseIds.length);\r",
									"const randomId = responseIds[randomIndex];\r",
									"\r",
									"pm.variables.set(\"randomId\", randomId);\r",
									"pm.request.url.query.add({ key: 'id', value: randomId.toString() });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									"console.log(\"${randomId} Product added\");\r",
									"\r",
									"pm.test(\"Check for empty response\", function () {\r",
									"    const responseData = pm.response.text();\r",
									"    console.log(\"Response Body:\", pm.response.text());\r",
									"    pm.expect(responseBody).to.be.empty; // Compare response data with an empty object\r",
									"    console.log(\"Response Body is empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/delete"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://gist.githubusercontent.com/sinanerdinc/71d6a6442d805ce0bc33a6feb2e2c6b5/raw/750f7305a931b7a2577c805a7e3cde12bee33124/example_products.json",
			"type": "string"
		}
	]
}